
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

def dashboard_gdpr():
    """Dashboard GDPR para monitorizaci√≥n de cumplimiento"""

    st.set_page_config(
        page_title="üîí Dashboard GDPR - Cumplimiento Anonimizaci√≥n",
        layout="wide"
    )

    st.title("üîí Dashboard GDPR - Cumplimiento de Anonimizaci√≥n")
    st.markdown("### Monitorizaci√≥n en Tiempo Real del Pipeline de Protecci√≥n de Datos")

    # M√©tricas principales en 4 columnas
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            label="K-anonimato", 
            value="10", 
            delta="‚úÖ CUMPLE",
            help="Cada registro es indistinguible de al menos 9 otros"
        )

    with col2:
        st.metric(
            label="L-diversidad", 
            value="2", 
            delta="‚úÖ CUMPLE",
            help="Cada grupo k-an√≥nimo tiene al menos 2 valores diversos"
        )

    with col3:
        st.metric(
            label="Œµ Privacidad", 
            value="2.0", 
            delta="‚úÖ CUMPLE",
            help="Nivel de privacidad diferencial aplicado"
        )

    with col4:
        st.metric(
            label="Riesgo GDPR", 
            value="BAJO", 
            delta="‚úÖ SEGURO",
            help="Evaluaci√≥n de riesgo de cumplimiento"
        )

    # Gr√°fico de degradaci√≥n de rendimiento
    st.subheader("üìä Impacto en Rendimiento de Modelos")

    # Datos de ejemplo (usar resultados reales del pipeline)
    model_performance = pd.DataFrame({
        'Modelo': ['Random Forest', 'XGBoost', 'Regresi√≥n Log√≠stica'],
        'AUC_Original': [0.85, 0.87, 0.82],
        'AUC_Anonimizado': [0.83, 0.84, 0.80],
        'Degradaci√≥n_%': [2.4, 3.4, 2.4]
    })

    fig = px.bar(
        model_performance, 
        x='Modelo', 
        y='Degradaci√≥n_%',
        title="Degradaci√≥n de Rendimiento por Modelo",
        color='Degradaci√≥n_%',
        color_continuous_scale='RdYlGn_r'
    )
    fig.add_hline(y=10, line_dash="dash", line_color="red", 
                  annotation_text="L√≠mite Aceptable (10%)")
    st.plotly_chart(fig, use_container_width=True)

    # Indicadores de cumplimiento GDPR
    st.subheader("‚úÖ Estado de Cumplimiento GDPR")

    compliance_data = {
        'Principio GDPR': [
            'Minimizaci√≥n de Datos',
            'Limitaci√≥n de Finalidad', 
            'Exactitud',
            'Integridad y Confidencialidad',
            'Responsabilidad Proactiva'
        ],
        'Estado': ['‚úÖ CUMPLE'] * 5,
        'Art√≠culo': ['Art. 5.1.c', 'Art. 5.1.b', 'Art. 5.1.d', 'Art. 5.1.f', 'Art. 5.2']
    }

    st.dataframe(pd.DataFrame(compliance_data), use_container_width=True)

    # Configuraci√≥n de t√©cnicas de anonimizaci√≥n
    st.subheader("üîß Configuraci√≥n de T√©cnicas de Anonimizaci√≥n")

    with st.expander("Configurar Par√°metros de Privacidad"):
        col1, col2 = st.columns(2)

        with col1:
            k_value = st.slider("Valor K (K-anonimato)", 5, 20, 10)
            l_value = st.slider("Valor L (L-diversidad)", 2, 5, 2)

        with col2:
            epsilon = st.slider("Epsilon (Privacidad Diferencial)", 0.1, 5.0, 2.0, 0.1)
            hash_method = st.selectbox("M√©todo de Hash", ["SHA-256", "SHA-512", "MD5"])

        if st.button("Aplicar Configuraci√≥n"):
            st.success("‚úÖ Configuraci√≥n actualizada correctamente")

    # Log de auditor√≠a
    st.subheader("üìã Log de Auditor√≠a")

    audit_log = pd.DataFrame({
        'Timestamp': ['2025-06-27 10:30:00', '2025-06-27 09:15:00', '2025-06-27 08:00:00'],
        'Evento': ['Evaluaci√≥n GDPR completada', 'Pipeline anonimizaci√≥n ejecutado', 'Carga de datos PaySim1'],
        'Usuario': ['admin', 'data_scientist', 'admin'],
        'Estado': ['‚úÖ √âxito', '‚úÖ √âxito', '‚úÖ √âxito']
    })

    st.dataframe(audit_log, use_container_width=True)

if __name__ == "__main__":
    dashboard_gdpr()
